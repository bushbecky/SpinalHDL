/*
 * SpinalHDL
 * Copyright (c) Dolu, All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.
 */

package spinal

import scala.collection.mutable

/**
 * Created by PIC18F on 11.01.2015.
 */
object when {
  val stack = new SafeStack[when]


  def doWhen(w: when,isTrue : Boolean)(block: => Unit): when = {
    w.isTrue = isTrue
    stack.push(w)
    block
    stack.pop(w)
    w
  }

  def apply(cond: Bool)(block: => Unit): when = {
    doWhen(new when(cond),true)(block)
  }


  def push(w: when): Unit = {
    stack.push(w)
  }

  def pop(w: when): Unit = {
    stack.pop(w)
    if(stack.size() == 0) stackCounter = stackCounter + 1
  }

  var stackCounter = 0
}

class when(val cond: Bool) {
  var isTrue : Boolean = true;
  def otherwise(block: => Unit): Unit = {
    when.doWhen(this,false)(block)
  }

  val autoGeneratedMuxs = mutable.Set[Node]()
 // val whenKind = mutable.Set[when]()

}
